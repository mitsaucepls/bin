#!/usr/bin/env ruby
# Highly inspired by this repository by nicweeaboo
# https://github.com/nicweeaboo/nhentai-favorites-auto-pagination

require 'watir'
require 'selenium-webdriver'

def wait_for_page_load(browser, timeout: 30)
  browser.wait_until(timeout: timeout) do
    browser.execute_script("return document.readyState") == "complete"
  end
end

def login(browser)
  username = ENV.fetch('NH_USERNAME') do
    browser.execute_script("window.alert('Please set NH_USERNAME in your environment')")
    sleep(1.5)
    browser.alert.ok
    browser.quit
    abort "Please set NH_USERNAME in your environment"
  end

  password = ENV.fetch('NH_PASSWORD') do
    browser.execute_script("window.alert('Please set NH_PASSWORD in your environment')")
    sleep(1.5)
    browser.alert.ok
    browser.quit
    abort "Please set NH_PASSWORD in your environment"
  end
  browser.goto 'https://nhentai.net/login/'
  browser.text_field(:name => 'username_or_email').set username
  browser.text_field(:name => 'password').set password

  # open and wait for captcha
  anchor = browser.iframe(title: 'reCAPTCHA')
  anchor.wait_until(timeout: 30, &:present?)

  checkbox = anchor.span(id: 'recaptcha-anchor')
  checkbox.wait_until(timeout: 30, &:present?).click

  checkbox.wait_until(timeout: 120) do |cb|
    cb.attribute_value('aria-checked') == 'true'
  end

  browser.button(class: ['button','button-wide']).click

  browser.a(href: '/favorites/').wait_until(timeout: 60, &:present?)
end

def play(browser, page_count = 0, id = "")
  if not id.empty?
    browser.goto("https://nhentai.net/g/#{id}/")
    browser.wait_until(timeout: 300) do
      browser.execute_script("return document.readyState") == "complete"
    end

    Watir::Wait.until(timeout: 30) { browser.divs(class: ['tag-container','field-name']).any? }

    # grab pages
    pages_div = browser.divs(class: ['tag-container','field-name'])
      .find { |d| d.text.strip.start_with?('Pages:') }

    pages_div.wait_until(timeout: 30, &:present?)

    page_count = pages_div.span(class: 'name').text.to_i
  end

  base = browser.url
  page = 1
  first = true

  browser.goto("#{base}#{page}")
  wait_for_page_load(browser)
  sec = browser.section(id: 'image-container')
  sec.wait_until(timeout: 30, &:present?)

  while page <= page_count
    if not first
      next_btn = browser.a(class: 'next')
      next_btn.wait_until(timeout: 30, &:present?).click
    else
      first = false
    end

    sec = browser.section(id: 'image-container')
    sec.wait_until(timeout: 30, &:present?)

    # slow‐scroll to the bottom
    loop do
      scrolled    = browser.execute_script('return window.pageYOffset')
      viewport    = browser.execute_script('return window.innerHeight')
      full_height = browser.execute_script('return document.body.scrollHeight')
      break if scrolled + viewport >= full_height
      browser.execute_script('window.scrollBy(0,2)')
      sleep 0.02
    end
    sleep 0.5

    # re‐read the **actual** page number from the URL
    if m = browser.url.match(%r{/(\d+)/?$})
      page = m[1].to_i
    end

    page += 1
  end
end

def play_random(browser, optional_path = "")
  while true
    browser.goto "https://nhentai.net/#{optional_path}random"

    browser.wait_until(timeout: 300) do
      browser.execute_script("return document.readyState") == "complete"
    end

    Watir::Wait.until(timeout: 30) { browser.divs(class: ['tag-container','field-name']).any? }

    # grab pages
    pages_div = browser.divs(class: ['tag-container','field-name'])
      .find { |d| d.text.strip.start_with?('Pages:') }

    pages_div.wait_until(timeout: 30, &:present?)

    page_count = pages_div.span(class: 'name').text.to_i

    play(browser, page_count)

    browser.execute_script("window.alert('Last page. Picking anohter one...')")
    sleep(1.5)
    browser.alert.ok
  end
end

def play_favorites(browser)
  login(browser)
  play_random(browser, "favorites/")
end

command = ARGV.shift

unless command
  warn "Usage: nhentai [random|favorites|<id>]"
  exit 1
end

firefox_opts = Selenium::WebDriver::Firefox::Options.new
firefox_opts.add_argument('--private-window')

browser = Watir::Browser.new :firefox, options: firefox_opts
browser.window.full_screen

case command
when 'random'
  play_random(browser)
when 'favorites'
  play_favorites(browser)
when /\A\d+\z/
  play(browser, 0, command)
else
  warn "Unknown command: #{command}"
  warn "Usage: nhentai [random|favorites|<id>]"
  exit 1
end
